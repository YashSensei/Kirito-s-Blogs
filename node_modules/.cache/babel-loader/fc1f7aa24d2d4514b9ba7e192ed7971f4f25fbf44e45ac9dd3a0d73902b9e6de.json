{"ast":null,"code":"// Blog posts data - This would typically come from a CMS or database\nexport const blogPosts = [{\n  id: 1,\n  title: \"Getting Started with React Development\",\n  excerpt: \"Learn the fundamentals of React and build your first interactive application with modern JavaScript techniques.\",\n  content: `\n# Getting Started with React Development\n\nReact has revolutionized the way we build user interfaces. In this comprehensive guide, we'll explore the fundamentals of React and learn how to build your first interactive application.\n\n## What is React?\n\nReact is a JavaScript library for building user interfaces, particularly single-page applications. It's used for handling the view layer and can be used for developing both web and mobile applications.\n\n## Key Features\n\n- **Component-Based**: Everything in React is a component\n- **Virtual DOM**: Efficient rendering and updates\n- **JSX**: JavaScript XML for writing components\n- **Unidirectional Data Flow**: Predictable state management\n\n## Setting Up Your First React App\n\n\\`\\`\\`bash\nnpx create-react-app my-app\ncd my-app\nnpm start\n\\`\\`\\`\n\n## Creating Your First Component\n\n\\`\\`\\`jsx\nimport React from 'react';\n\nfunction Welcome() {\n  return (\n    <div>\n      <h1>Hello, React!</h1>\n      <p>Welcome to your first React component.</p>\n    </div>\n  );\n}\n\nexport default Welcome;\n\\`\\`\\`\n\n## State Management\n\nReact components can have state, which allows them to be interactive:\n\n\\`\\`\\`jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}\n\\`\\`\\`\n\n## Best Practices\n\n1. **Keep components small and focused**\n2. **Use meaningful names for props and state**\n3. **Implement proper error boundaries**\n4. **Optimize performance with React.memo**\n\n## Conclusion\n\nReact provides a powerful and flexible way to build modern web applications. With its component-based architecture and rich ecosystem, you can create complex applications with clean, maintainable code.\n\nStart building with React today and discover the endless possibilities!\n    `,\n  author: \"John Doe\",\n  date: new Date('2024-01-15'),\n  category: \"Development\",\n  readTime: \"5 min read\",\n  tags: [\"React\", \"JavaScript\", \"Frontend\"],\n  featured: true\n}, {\n  id: 2,\n  title: \"The Future of Web Development\",\n  excerpt: \"Explore the latest trends and technologies shaping the future of web development and user experience.\",\n  content: `\n# The Future of Web Development\n\nThe web development landscape is constantly evolving, bringing new technologies and methodologies that shape how we build and deploy applications.\n\n## Emerging Trends\n\n### 1. WebAssembly (WASM)\nWebAssembly is revolutionizing web performance by allowing code written in languages like C++ and Rust to run in the browser at near-native speeds.\n\n### 2. Progressive Web Apps (PWAs)\nPWAs combine the best of web and mobile apps, offering offline functionality, push notifications, and app-like experiences.\n\n### 3. Serverless Architecture\nServerless computing is changing how we deploy and scale applications, reducing infrastructure management overhead.\n\n## Modern Development Tools\n\n- **Vite**: Lightning-fast build tool\n- **TypeScript**: Type-safe JavaScript\n- **Tailwind CSS**: Utility-first CSS framework\n- **Next.js**: Full-stack React framework\n\n## The Role of AI in Development\n\nArtificial Intelligence is becoming increasingly important in web development:\n\n- **Code Generation**: AI-powered code completion\n- **Testing**: Automated test generation\n- **Performance**: Intelligent optimization\n- **Accessibility**: Automated accessibility checks\n\n## Conclusion\n\nThe future of web development is exciting and full of possibilities. Stay updated with the latest trends and technologies to remain competitive in this ever-evolving field.\n    `,\n  author: \"Jane Smith\",\n  date: new Date('2024-01-10'),\n  category: \"Technology\",\n  readTime: \"8 min read\",\n  tags: [\"Web Development\", \"Trends\", \"UX\"],\n  featured: true\n}, {\n  id: 3,\n  title: \"Mastering CSS Grid and Flexbox\",\n  excerpt: \"A comprehensive guide to modern CSS layout techniques that will transform your web design skills.\",\n  content: `\n# Mastering CSS Grid and Flexbox\n\nCSS Grid and Flexbox have changed the way we approach layouts in web development. These powerful layout systems provide unprecedented control over how elements are positioned and sized.\n\n## CSS Grid\n\nCSS Grid is a two-dimensional layout system that allows you to create complex layouts with rows and columns.\n\n### Basic Grid Setup\n\n\\`\\`\\`css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: auto;\n  gap: 20px;\n}\n\\`\\`\\`\n\n### Grid Areas\n\n\\`\\`\\`css\n.container {\n  display: grid;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar main main\"\n    \"footer footer footer\";\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.footer { grid-area: footer; }\n\\`\\`\\`\n\n## CSS Flexbox\n\nFlexbox is a one-dimensional layout method for arranging items in rows or columns.\n\n### Flex Container\n\n\\`\\`\\`css\n.flex-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\\`\\`\\`\n\n### Flex Items\n\n\\`\\`\\`css\n.flex-item {\n  flex: 1;\n  flex-grow: 1;\n  flex-shrink: 1;\n  flex-basis: auto;\n}\n\\`\\`\\`\n\n## When to Use Each\n\n- **Use Grid for**: Two-dimensional layouts, complex page structures\n- **Use Flexbox for**: One-dimensional layouts, component alignment\n\n## Best Practices\n\n1. Start with mobile-first design\n2. Use semantic HTML structure\n3. Test across different screen sizes\n4. Consider accessibility implications\n\n## Conclusion\n\nMastering CSS Grid and Flexbox will significantly improve your layout capabilities and create more responsive, maintainable designs.\n    `,\n  author: \"Mike Johnson\",\n  date: new Date('2024-01-05'),\n  category: \"Design\",\n  readTime: \"12 min read\",\n  tags: [\"CSS\", \"Grid\", \"Flexbox\", \"Layout\"],\n  featured: false\n}, {\n  id: 4,\n  title: \"Building Scalable APIs with Node.js\",\n  excerpt: \"Learn how to design and implement robust, scalable APIs using Node.js and Express framework.\",\n  content: `\n# Building Scalable APIs with Node.js\n\nNode.js has become the go-to platform for building fast, scalable APIs. In this guide, we'll explore best practices for creating robust backend services.\n\n## Why Node.js for APIs?\n\n- **Event-driven architecture**: Handles concurrent requests efficiently\n- **JavaScript everywhere**: Same language for frontend and backend\n- **Rich ecosystem**: Extensive package library\n- **Fast development**: Rapid prototyping and iteration\n\n## Setting Up Your Project\n\n\\`\\`\\`bash\nmkdir my-api\ncd my-api\nnpm init -y\nnpm install express cors helmet morgan\n\\`\\`\\`\n\n## Basic Express Server\n\n\\`\\`\\`javascript\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(helmet());\napp.use(cors());\napp.use(express.json());\n\n// Routes\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date() });\n});\n\napp.listen(PORT, () => {\n  console.log(\\`Server running on port \\${PORT}\\`);\n});\n\\`\\`\\`\n\n## API Design Principles\n\n1. **RESTful conventions**: Use proper HTTP methods\n2. **Consistent naming**: Follow naming conventions\n3. **Error handling**: Proper error responses\n4. **Documentation**: Clear API documentation\n\n## Security Best Practices\n\n- **Input validation**: Validate all inputs\n- **Authentication**: Implement proper auth\n- **Rate limiting**: Prevent abuse\n- **HTTPS**: Always use secure connections\n\n## Conclusion\n\nNode.js provides an excellent foundation for building scalable APIs. Follow these practices to create robust, maintainable services.\n    `,\n  author: \"Sarah Wilson\",\n  date: new Date('2024-01-20'),\n  category: \"Development\",\n  readTime: \"10 min read\",\n  tags: [\"Node.js\", \"API\", \"Backend\", \"Express\"],\n  featured: true\n}, {\n  id: 5,\n  title: \"The Art of User Experience Design\",\n  excerpt: \"Discover the principles and techniques that make digital products truly user-friendly and engaging.\",\n  content: `\n# The Art of User Experience Design\n\nUser Experience (UX) design is more than just making things look pretty. It's about creating meaningful, accessible, and delightful experiences for users.\n\n## What is UX Design?\n\nUX design is the process of creating products that provide meaningful and relevant experiences to users. This involves the design of the entire process of acquiring and integrating the product.\n\n## Core Principles\n\n### 1. User-Centered Design\nAlways design with the user in mind. Understand their needs, goals, and pain points.\n\n### 2. Accessibility\nDesign for everyone, including users with disabilities. Follow WCAG guidelines.\n\n### 3. Consistency\nMaintain consistent patterns and behaviors throughout your product.\n\n### 4. Simplicity\nRemove unnecessary complexity. Less is often more.\n\n## The Design Process\n\n1. **Research**: Understand your users and their needs\n2. **Ideation**: Generate ideas and solutions\n3. **Prototyping**: Create interactive prototypes\n4. **Testing**: Validate with real users\n5. **Implementation**: Build and launch\n\n## Tools and Techniques\n\n- **User Research**: Interviews, surveys, analytics\n- **Wireframing**: Sketch, Figma, Adobe XD\n- **Prototyping**: InVision, Framer, Principle\n- **Testing**: Usability testing, A/B testing\n\n## Measuring Success\n\n- **User satisfaction**: Surveys and feedback\n- **Task completion**: Success rates and time\n- **Engagement**: Time spent, return visits\n- **Business metrics**: Conversions, retention\n\n## Conclusion\n\nGreat UX design is invisible to users but makes all the difference in their experience. Focus on understanding and serving your users' needs.\n    `,\n  author: \"Alex Chen\",\n  date: new Date('2024-01-25'),\n  category: \"Design\",\n  readTime: \"7 min read\",\n  tags: [\"UX\", \"Design\", \"User Research\", \"Prototyping\"],\n  featured: false\n}];\n\n// Helper function to get all posts\nexport const getAllPosts = () => blogPosts;\n\n// Helper function to get a single post by ID\nexport const getPostById = id => blogPosts.find(post => post.id === parseInt(id));\n\n// Helper function to get featured posts\nexport const getFeaturedPosts = () => blogPosts.filter(post => post.featured);\n\n// Helper function to get posts by category\nexport const getPostsByCategory = category => blogPosts.filter(post => post.category === category);\n\n// Helper function to search posts\nexport const searchPosts = query => {\n  const lowercaseQuery = query.toLowerCase();\n  return blogPosts.filter(post => post.title.toLowerCase().includes(lowercaseQuery) || post.excerpt.toLowerCase().includes(lowercaseQuery) || post.tags.some(tag => tag.toLowerCase().includes(lowercaseQuery)));\n};","map":{"version":3,"names":["blogPosts","id","title","excerpt","content","author","date","Date","category","readTime","tags","featured","getAllPosts","getPostById","find","post","parseInt","getFeaturedPosts","filter","getPostsByCategory","searchPosts","query","lowercaseQuery","toLowerCase","includes","some","tag"],"sources":["C:/Users/yasha/OneDrive/Desktop/bigones/blogposts/src/data/blogPosts.js"],"sourcesContent":["// Blog posts data - This would typically come from a CMS or database\r\nexport const blogPosts = [\r\n  {\r\n    id: 1,\r\n    title: \"Getting Started with React Development\",\r\n    excerpt: \"Learn the fundamentals of React and build your first interactive application with modern JavaScript techniques.\",\r\n    content: `\r\n# Getting Started with React Development\r\n\r\nReact has revolutionized the way we build user interfaces. In this comprehensive guide, we'll explore the fundamentals of React and learn how to build your first interactive application.\r\n\r\n## What is React?\r\n\r\nReact is a JavaScript library for building user interfaces, particularly single-page applications. It's used for handling the view layer and can be used for developing both web and mobile applications.\r\n\r\n## Key Features\r\n\r\n- **Component-Based**: Everything in React is a component\r\n- **Virtual DOM**: Efficient rendering and updates\r\n- **JSX**: JavaScript XML for writing components\r\n- **Unidirectional Data Flow**: Predictable state management\r\n\r\n## Setting Up Your First React App\r\n\r\n\\`\\`\\`bash\r\nnpx create-react-app my-app\r\ncd my-app\r\nnpm start\r\n\\`\\`\\`\r\n\r\n## Creating Your First Component\r\n\r\n\\`\\`\\`jsx\r\nimport React from 'react';\r\n\r\nfunction Welcome() {\r\n  return (\r\n    <div>\r\n      <h1>Hello, React!</h1>\r\n      <p>Welcome to your first React component.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Welcome;\r\n\\`\\`\\`\r\n\r\n## State Management\r\n\r\nReact components can have state, which allows them to be interactive:\r\n\r\n\\`\\`\\`jsx\r\nimport React, { useState } from 'react';\r\n\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Increment\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\\`\\`\\`\r\n\r\n## Best Practices\r\n\r\n1. **Keep components small and focused**\r\n2. **Use meaningful names for props and state**\r\n3. **Implement proper error boundaries**\r\n4. **Optimize performance with React.memo**\r\n\r\n## Conclusion\r\n\r\nReact provides a powerful and flexible way to build modern web applications. With its component-based architecture and rich ecosystem, you can create complex applications with clean, maintainable code.\r\n\r\nStart building with React today and discover the endless possibilities!\r\n    `,\r\n    author: \"John Doe\",\r\n    date: new Date('2024-01-15'),\r\n    category: \"Development\",\r\n    readTime: \"5 min read\",\r\n    tags: [\"React\", \"JavaScript\", \"Frontend\"],\r\n    featured: true\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"The Future of Web Development\",\r\n    excerpt: \"Explore the latest trends and technologies shaping the future of web development and user experience.\",\r\n    content: `\r\n# The Future of Web Development\r\n\r\nThe web development landscape is constantly evolving, bringing new technologies and methodologies that shape how we build and deploy applications.\r\n\r\n## Emerging Trends\r\n\r\n### 1. WebAssembly (WASM)\r\nWebAssembly is revolutionizing web performance by allowing code written in languages like C++ and Rust to run in the browser at near-native speeds.\r\n\r\n### 2. Progressive Web Apps (PWAs)\r\nPWAs combine the best of web and mobile apps, offering offline functionality, push notifications, and app-like experiences.\r\n\r\n### 3. Serverless Architecture\r\nServerless computing is changing how we deploy and scale applications, reducing infrastructure management overhead.\r\n\r\n## Modern Development Tools\r\n\r\n- **Vite**: Lightning-fast build tool\r\n- **TypeScript**: Type-safe JavaScript\r\n- **Tailwind CSS**: Utility-first CSS framework\r\n- **Next.js**: Full-stack React framework\r\n\r\n## The Role of AI in Development\r\n\r\nArtificial Intelligence is becoming increasingly important in web development:\r\n\r\n- **Code Generation**: AI-powered code completion\r\n- **Testing**: Automated test generation\r\n- **Performance**: Intelligent optimization\r\n- **Accessibility**: Automated accessibility checks\r\n\r\n## Conclusion\r\n\r\nThe future of web development is exciting and full of possibilities. Stay updated with the latest trends and technologies to remain competitive in this ever-evolving field.\r\n    `,\r\n    author: \"Jane Smith\",\r\n    date: new Date('2024-01-10'),\r\n    category: \"Technology\",\r\n    readTime: \"8 min read\",\r\n    tags: [\"Web Development\", \"Trends\", \"UX\"],\r\n    featured: true\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Mastering CSS Grid and Flexbox\",\r\n    excerpt: \"A comprehensive guide to modern CSS layout techniques that will transform your web design skills.\",\r\n    content: `\r\n# Mastering CSS Grid and Flexbox\r\n\r\nCSS Grid and Flexbox have changed the way we approach layouts in web development. These powerful layout systems provide unprecedented control over how elements are positioned and sized.\r\n\r\n## CSS Grid\r\n\r\nCSS Grid is a two-dimensional layout system that allows you to create complex layouts with rows and columns.\r\n\r\n### Basic Grid Setup\r\n\r\n\\`\\`\\`css\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: auto;\r\n  gap: 20px;\r\n}\r\n\\`\\`\\`\r\n\r\n### Grid Areas\r\n\r\n\\`\\`\\`css\r\n.container {\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"header header header\"\r\n    \"sidebar main main\"\r\n    \"footer footer footer\";\r\n}\r\n\r\n.header { grid-area: header; }\r\n.sidebar { grid-area: sidebar; }\r\n.main { grid-area: main; }\r\n.footer { grid-area: footer; }\r\n\\`\\`\\`\r\n\r\n## CSS Flexbox\r\n\r\nFlexbox is a one-dimensional layout method for arranging items in rows or columns.\r\n\r\n### Flex Container\r\n\r\n\\`\\`\\`css\r\n.flex-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n}\r\n\\`\\`\\`\r\n\r\n### Flex Items\r\n\r\n\\`\\`\\`css\r\n.flex-item {\r\n  flex: 1;\r\n  flex-grow: 1;\r\n  flex-shrink: 1;\r\n  flex-basis: auto;\r\n}\r\n\\`\\`\\`\r\n\r\n## When to Use Each\r\n\r\n- **Use Grid for**: Two-dimensional layouts, complex page structures\r\n- **Use Flexbox for**: One-dimensional layouts, component alignment\r\n\r\n## Best Practices\r\n\r\n1. Start with mobile-first design\r\n2. Use semantic HTML structure\r\n3. Test across different screen sizes\r\n4. Consider accessibility implications\r\n\r\n## Conclusion\r\n\r\nMastering CSS Grid and Flexbox will significantly improve your layout capabilities and create more responsive, maintainable designs.\r\n    `,\r\n    author: \"Mike Johnson\",\r\n    date: new Date('2024-01-05'),\r\n    category: \"Design\",\r\n    readTime: \"12 min read\",\r\n    tags: [\"CSS\", \"Grid\", \"Flexbox\", \"Layout\"],\r\n    featured: false\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"Building Scalable APIs with Node.js\",\r\n    excerpt: \"Learn how to design and implement robust, scalable APIs using Node.js and Express framework.\",\r\n    content: `\r\n# Building Scalable APIs with Node.js\r\n\r\nNode.js has become the go-to platform for building fast, scalable APIs. In this guide, we'll explore best practices for creating robust backend services.\r\n\r\n## Why Node.js for APIs?\r\n\r\n- **Event-driven architecture**: Handles concurrent requests efficiently\r\n- **JavaScript everywhere**: Same language for frontend and backend\r\n- **Rich ecosystem**: Extensive package library\r\n- **Fast development**: Rapid prototyping and iteration\r\n\r\n## Setting Up Your Project\r\n\r\n\\`\\`\\`bash\r\nmkdir my-api\r\ncd my-api\r\nnpm init -y\r\nnpm install express cors helmet morgan\r\n\\`\\`\\`\r\n\r\n## Basic Express Server\r\n\r\n\\`\\`\\`javascript\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst helmet = require('helmet');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Middleware\r\napp.use(helmet());\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Routes\r\napp.get('/api/health', (req, res) => {\r\n  res.json({ status: 'OK', timestamp: new Date() });\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(\\`Server running on port \\${PORT}\\`);\r\n});\r\n\\`\\`\\`\r\n\r\n## API Design Principles\r\n\r\n1. **RESTful conventions**: Use proper HTTP methods\r\n2. **Consistent naming**: Follow naming conventions\r\n3. **Error handling**: Proper error responses\r\n4. **Documentation**: Clear API documentation\r\n\r\n## Security Best Practices\r\n\r\n- **Input validation**: Validate all inputs\r\n- **Authentication**: Implement proper auth\r\n- **Rate limiting**: Prevent abuse\r\n- **HTTPS**: Always use secure connections\r\n\r\n## Conclusion\r\n\r\nNode.js provides an excellent foundation for building scalable APIs. Follow these practices to create robust, maintainable services.\r\n    `,\r\n    author: \"Sarah Wilson\",\r\n    date: new Date('2024-01-20'),\r\n    category: \"Development\",\r\n    readTime: \"10 min read\",\r\n    tags: [\"Node.js\", \"API\", \"Backend\", \"Express\"],\r\n    featured: true\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"The Art of User Experience Design\",\r\n    excerpt: \"Discover the principles and techniques that make digital products truly user-friendly and engaging.\",\r\n    content: `\r\n# The Art of User Experience Design\r\n\r\nUser Experience (UX) design is more than just making things look pretty. It's about creating meaningful, accessible, and delightful experiences for users.\r\n\r\n## What is UX Design?\r\n\r\nUX design is the process of creating products that provide meaningful and relevant experiences to users. This involves the design of the entire process of acquiring and integrating the product.\r\n\r\n## Core Principles\r\n\r\n### 1. User-Centered Design\r\nAlways design with the user in mind. Understand their needs, goals, and pain points.\r\n\r\n### 2. Accessibility\r\nDesign for everyone, including users with disabilities. Follow WCAG guidelines.\r\n\r\n### 3. Consistency\r\nMaintain consistent patterns and behaviors throughout your product.\r\n\r\n### 4. Simplicity\r\nRemove unnecessary complexity. Less is often more.\r\n\r\n## The Design Process\r\n\r\n1. **Research**: Understand your users and their needs\r\n2. **Ideation**: Generate ideas and solutions\r\n3. **Prototyping**: Create interactive prototypes\r\n4. **Testing**: Validate with real users\r\n5. **Implementation**: Build and launch\r\n\r\n## Tools and Techniques\r\n\r\n- **User Research**: Interviews, surveys, analytics\r\n- **Wireframing**: Sketch, Figma, Adobe XD\r\n- **Prototyping**: InVision, Framer, Principle\r\n- **Testing**: Usability testing, A/B testing\r\n\r\n## Measuring Success\r\n\r\n- **User satisfaction**: Surveys and feedback\r\n- **Task completion**: Success rates and time\r\n- **Engagement**: Time spent, return visits\r\n- **Business metrics**: Conversions, retention\r\n\r\n## Conclusion\r\n\r\nGreat UX design is invisible to users but makes all the difference in their experience. Focus on understanding and serving your users' needs.\r\n    `,\r\n    author: \"Alex Chen\",\r\n    date: new Date('2024-01-25'),\r\n    category: \"Design\",\r\n    readTime: \"7 min read\",\r\n    tags: [\"UX\", \"Design\", \"User Research\", \"Prototyping\"],\r\n    featured: false\r\n  }\r\n];\r\n\r\n// Helper function to get all posts\r\nexport const getAllPosts = () => blogPosts;\r\n\r\n// Helper function to get a single post by ID\r\nexport const getPostById = (id) => blogPosts.find(post => post.id === parseInt(id));\r\n\r\n// Helper function to get featured posts\r\nexport const getFeaturedPosts = () => blogPosts.filter(post => post.featured);\r\n\r\n// Helper function to get posts by category\r\nexport const getPostsByCategory = (category) => blogPosts.filter(post => post.category === category);\r\n\r\n// Helper function to search posts\r\nexport const searchPosts = (query) => {\r\n  const lowercaseQuery = query.toLowerCase();\r\n  return blogPosts.filter(post => \r\n    post.title.toLowerCase().includes(lowercaseQuery) ||\r\n    post.excerpt.toLowerCase().includes(lowercaseQuery) ||\r\n    post.tags.some(tag => tag.toLowerCase().includes(lowercaseQuery))\r\n  );\r\n}; "],"mappings":"AAAA;AACA,OAAO,MAAMA,SAAS,GAAG,CACvB;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,wCAAwC;EAC/CC,OAAO,EAAE,iHAAiH;EAC1HC,OAAO,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACDC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;EAC5BC,QAAQ,EAAE,aAAa;EACvBC,QAAQ,EAAE,YAAY;EACtBC,IAAI,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,UAAU,CAAC;EACzCC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEV,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,+BAA+B;EACtCC,OAAO,EAAE,uGAAuG;EAChHC,OAAO,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACDC,MAAM,EAAE,YAAY;EACpBC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;EAC5BC,QAAQ,EAAE,YAAY;EACtBC,QAAQ,EAAE,YAAY;EACtBC,IAAI,EAAE,CAAC,iBAAiB,EAAE,QAAQ,EAAE,IAAI,CAAC;EACzCC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEV,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,gCAAgC;EACvCC,OAAO,EAAE,mGAAmG;EAC5GC,OAAO,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACDC,MAAM,EAAE,cAAc;EACtBC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;EAC5BC,QAAQ,EAAE,QAAQ;EAClBC,QAAQ,EAAE,aAAa;EACvBC,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC;EAC1CC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEV,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,qCAAqC;EAC5CC,OAAO,EAAE,8FAA8F;EACvGC,OAAO,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACDC,MAAM,EAAE,cAAc;EACtBC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;EAC5BC,QAAQ,EAAE,aAAa;EACvBC,QAAQ,EAAE,aAAa;EACvBC,IAAI,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC;EAC9CC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEV,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,mCAAmC;EAC1CC,OAAO,EAAE,qGAAqG;EAC9GC,OAAO,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACDC,MAAM,EAAE,WAAW;EACnBC,IAAI,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;EAC5BC,QAAQ,EAAE,QAAQ;EAClBC,QAAQ,EAAE,YAAY;EACtBC,IAAI,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,eAAe,EAAE,aAAa,CAAC;EACtDC,QAAQ,EAAE;AACZ,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAMZ,SAAS;;AAE1C;AACA,OAAO,MAAMa,WAAW,GAAIZ,EAAE,IAAKD,SAAS,CAACc,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACd,EAAE,KAAKe,QAAQ,CAACf,EAAE,CAAC,CAAC;;AAEnF;AACA,OAAO,MAAMgB,gBAAgB,GAAGA,CAAA,KAAMjB,SAAS,CAACkB,MAAM,CAACH,IAAI,IAAIA,IAAI,CAACJ,QAAQ,CAAC;;AAE7E;AACA,OAAO,MAAMQ,kBAAkB,GAAIX,QAAQ,IAAKR,SAAS,CAACkB,MAAM,CAACH,IAAI,IAAIA,IAAI,CAACP,QAAQ,KAAKA,QAAQ,CAAC;;AAEpG;AACA,OAAO,MAAMY,WAAW,GAAIC,KAAK,IAAK;EACpC,MAAMC,cAAc,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC;EAC1C,OAAOvB,SAAS,CAACkB,MAAM,CAACH,IAAI,IAC1BA,IAAI,CAACb,KAAK,CAACqB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,cAAc,CAAC,IACjDP,IAAI,CAACZ,OAAO,CAACoB,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,cAAc,CAAC,IACnDP,IAAI,CAACL,IAAI,CAACe,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,cAAc,CAAC,CAClE,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}